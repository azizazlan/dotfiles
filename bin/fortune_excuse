#!/usr/bin/env python

import os
import sys
import random

DEFAULT_EMAIL="richo || Today's excuse: "
DEFAULT_FOOTER="http://blog.psych0tik.net"
def generate_excuse(filename=None):
    try:
        excuses_f = open(os.environ["EXCUSES_FILE"], 'r')
    except KeyError:
        if filename:
            excuses_f = open(filename, 'r')
        else:
            raise IOError
    except IOError:
        sys.stdout = sys.stderr
        # XXX This is now broken.
        print("excuses file %(path)s not found. Exiting." % {'path': os.environ['EXCUSES_FILE']})
        sys.exit(1)
    except KeyError:
        sys.stdout = sys.stderr
        print("environment variable EXCUSES_FILE not set. Exiting")
        sys.exit(1)
    excuses = [i.replace("\n", "") for i in excuses_f]
    return random.choice(excuses)

# We need py >= 2.7, but we give the system the benefit of the doubt and just
# attempt to chainload 2.7 or greater if that's not the system python. It is
# hax.

if sys.version_info < (2, 7):
    # This is quick hax to chainload 2.7
    # It solves my immediate problem, but ain't great longterm.
    try:
        import chainload
        chainload.load_python("python2.7")
    except ImportError: # Needs to be 2.6 compatible
        pass

    # if chainload succeeds we're not here anymore anyway...
    try:
        # Last ditch attempt, we'll see if argparse works..
        import argparse
    except ImportError: # Likewise
        # Predictably, that failed.. but because we're in a good mood we'll at
        # least print an excuse and die gracefully
        if __name__ == "__main__":
            if "-e" in sys.argv:
                print DEFAULT_EMAIL
                print ""
            print generate_excuse()
            exit(0)
        # Even though I'm losing the exception trace I'm not too concerned,
        # pretty sure I know what's going on.

import textwrap
import argparse

parser = argparse.ArgumentParser(description="Print a random entry from the excuses file")
parser.add_argument('-w', '--width', dest='width', action='store', type=int,
        default=False,
        help="Wrap formats to n characters")
parser.add_argument('-e', '--email', dest='email', action='store_true',
        default=False,
        help="Print a brief message suitable for an email signature above the fortune")
parser.add_argument('-m', '--message', dest='message', action='store', type=str,
        default=DEFAULT_EMAIL,
        help="Print a brief message suitable for an email signature above the fortune")


def index(req):
    # We we can be served by mod_python
    #return generate_excuse(filename=os.path.join(os.path.dirname(req.filename), ".excuses"))
   return os.path.join(os.path.dirname(req.filename), ".excuses")
   exit()

def main():
    args = parser.parse_args()
    excuse = generate_excuse()
    if args.email:
        print(args.message)
        # I do not understand why, but an extra newline seems to make
        # everything work. *shrug*
        print('')
    if args.width:
        for i in textwrap.wrap(excuse, args.width):
            print(i)
    else:
        print(excuse)
    if args.email:
        print(DEFAULT_FOOTER)


if __name__ == "__main__":
    try:
        main()
    except:
        print("richo has stupidly broken his sig generator")
